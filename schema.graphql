scalar Cursor
scalar Time

interface Node {
  id: ID!
}

type Query {
  viewer: Viewer
}

type Viewer {
  games(
    filter: GameFilter
    order: GameOrder
    first: Int
    after: Cursor
  ): GameConnection!

  platforms(
    order: PlatformOrder
    first: Int
    after: Cursor
  ): PlatformConnection!

  leaderboard(
    game: ID!
    category: ID!
    level: ID
  ): Leaderboard
}

type PageInfo {
  startCursor: Cursor
  endCursor: Cursor
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
}

enum OrderDirection {
  ASC
  DESC
}

type Link {
  rel: String
  uri: String!
}

type Category implements Node {
  id: ID!
  name: String!
  weblink: String!
  type: CategoryType!
  rules: String!
  players: CategoryPlayers!
  miscellaneous: Boolean!
}

enum CategoryType {
  PER_GAME
  PER_LEVEL
}

type CategoryPlayers {
  type: CategoryPlayersType!
  value: Int!
}

enum CategoryPlayersType {
  EXACTLY
  UP_TO
}

input GameFilter {
  name: String
  # TODO add the remaining filters for games
}

input GameOrder {
  field: GameOrderField
  direction: OrderDirection
}

enum GameOrderField {
  NAME_INT
  NAME_JAP
  ABBREVIATION
  RELEASED
  CREATED
  SIMILARITY
}

type GameConnection {
  edges: [GameEdge!]!
  nodes: [Game!]!
  pageInfo: PageInfo!
}

type GameEdge {
  node: Game!
  cursor: Cursor
}

type Game implements Node {
  id: ID!
  names: GameNames!
  abbreviation: String
  weblink: String!
  releaseDate: String!
  ruleset: GameRuleset!

  platforms: [Platform!]!
  # TODO regions

  categories: [Category!]!
}

type GameNames {
  international: String!
  japanese: String
  twitch: String
}

type GameRuleset {
  showMilliseconds: Boolean!
  requireVerification: Boolean!
  requireVideo: Boolean!
  runTimes: [GameRunTime!]!
  defaultRunTime: GameRunTime!
  emulatorsAllowed: Boolean!
}

enum GameRunTime {
  REALTIME
  REALTIME_NOLOADS
  INGAME
}

type GameModerator {
  # TODO user
  role: GameModeratorRole!
}

enum GameModeratorRole {
  MODERATOR
  SUPER_MODERATOR
}

type Leaderboard {
  game: Game!
  category: Category!
  timing: GameRunTime!
  runs: [PlacedRun!]!
}

type PlacedRun {
  place: Int!
  run: Run!
}

input PlatformOrder {
  field: PlatformOrderField
  direction: OrderDirection
}

enum PlatformOrderField {
  NAME
  RELEASED
}

type PlatformConnection {
  edges: [PlatformEdge!]!
  nodes: [Platform!]!
  pageInfo: PageInfo!
}

type PlatformEdge {
  node: Platform!
  cursor: Cursor
}

type Platform implements Node {
  id: ID!
  name: String!
  released: Int!
}

type Run implements Node {
  id: ID!
  game: Game!
  category: Category!
  videos: RunVideos
  comment: String!
  status: RunStatus!
  date: String
  submitted: String
}

type RunStatus {
  status: RunStatusValue!
  # TODO examiner
  verifyDate: Time
  reason: String
}

enum RunStatusValue {
  NEW
  VERIFIED
  REJECTED
}

type RunVideos {
  text: String
  links: [Link!]!
}
